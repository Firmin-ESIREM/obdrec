from sys import argv, stderr, exit as sys_exit
import dashboard
from os import path
from datetime import datetime
from csv import reader
import tkinter as tk
from tkinter.font import Font
from threading import Thread

ui = tk.Tk(className="Dashboard")
ui.attributes("-fullscreen", True)
ui.configure(bg="black", cursor="none")
speed = tk.StringVar()

mode = dashboard.LIVE

if len(argv) not in [2, 3] \
        or (argv[1] == "replay" and len(argv) != 3) \
        or (argv[1] == "live" and len(argv) != 2) \
        or argv[1] not in ["live", "replay"]:
    print(
        "The arguments you specified are invalid.\n"
        "Usage : $PYTHON_INTERPRETER dashboard.py <live|replay> [path_to_replay_file]",
        file=stderr
    )
    print(len(argv))
    sys_exit(1)

if argv[1] == "replay" and len(argv) == 3:
    mode = dashboard.REPLAY
    if not (path.isfile(argv[2])):
        print("The file you specified does not exist.", file=stderr)
        sys_exit(1)
    if not (argv[2].endswith(".csv")):
        print("The file you provided does not seem to be a CSV file.", file=stderr)
        sys_exit(1)

csv_header = "time;speed_kph;rpm;intake_temperature_degC\n"


def trip_loop():
    with open(argv[2], 'r') as f:
        lines = f.readlines()

        if lines[0] != csv_header:
            print(lines[0])
            print("The file you provided does not seem to have been generated by our services.", file=stderr)
            sys_exit(1)
        start_time = datetime.now()
        trip_beginning = float(list(reader([lines[1]], delimiter=';'))[0][0])
        for line in lines[1:]:
            parsed_line = list(reader([line], delimiter=';'))[0]
            while float(parsed_line[0]) - trip_beginning > (datetime.now() - start_time).total_seconds():
                pass
            print(parsed_line[1], parsed_line[2])
            speed.set(str(round(float(parsed_line[1]))))


speed_frame = tk.Frame(ui, bg="black")
speed_frame.pack(expand=True)
speed_label = tk.Label(speed_frame, textvariable=speed, font=Font(size=100), fg="white", bg="black")
speed_unit_label = tk.Label(speed_frame, text="km/h", font=Font(size=40), fg="white", bg="black")
speed_label.pack()
speed_unit_label.pack()

if mode == dashboard.REPLAY:
    Thread(target=trip_loop).start()
    ui.mainloop()


def gear_change(old_speed, time_diff, new_speed, rpm, combustion):
    acceleration = (new_speed / 3.6 - old_speed / 3.6) / time_diff
    if combustion == "E":   # suggest gear changing for petrol motorisation
        if acceleration > 2:  # suggest to change a gear in an acceleration phase
            if rpm > 3500:
                return "up"
        if -2 < acceleration < 2:   # suggest to change a gear at constant speed
            if rpm > 3000:
                return "up"
            elif rpm < 2000:
                return "down"
        if acceleration < -2:   # suggest to change a gear in a deceleration phase
            if rpm < 2200:
                return "down"
    elif combustion == "D":    # suggest gear changing for diesel motorisation
        if acceleration > 2:
            if rpm > 3000:
                return "up"
        if -2 < acceleration < 2:
            if rpm > 3500:
                return "up"
            elif rpm < 1500:
                return "down"
        if acceleration < -2:
            if rpm < 1700:
                return "down"
